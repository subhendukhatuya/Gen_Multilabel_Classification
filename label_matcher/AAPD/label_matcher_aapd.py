# -*- coding: utf-8 -*-
"""aiso-testing (1).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18R_xLvDnDccTr8LzV_VRJt0LeqHeJHq-
"""

from sentence_transformers import SentenceTransformer, util
import numpy as np
import pandas as pd

# Load the pre-trained model

model = SentenceTransformer('all-MiniLM-L6-v2')
# Your 'questions' dictionary
questions = {
    'Unnecessary': 'The tweet indicates vaccines are unnecessary, or that alternate cures are better.',
    'Mandatory': 'Against mandatory vaccination — The tweet suggests that vaccines should not be made mandatory.',
    'Pharma': 'Against Big Pharma — The tweet indicates that the Big Pharmaceutical companies are just trying to earn money, or the tweet is against such companies in general because of their history.',
    'Conspiracy': 'Deeper Conspiracy — The tweet suggests some deeper conspiracy, and not just that the Big Pharma want to make money (e.g., vaccines are being used to track people, COVID is a hoax)',
    'Political': 'Political side of vaccines — The tweet expresses concerns that the governments / politicians are pushing their own agenda though the vaccines.',
    'Country': 'Country of origin — The tweet is against some vaccine because of the country where it was developed / manufactured',
    'Rushed': 'Untested / Rushed Process — The tweet expresses concerns that the vaccines have not been tested properly or that the published data is not accurate.',
    'Ingredients': 'Vaccine Ingredients / technology — The tweet expresses concerns about the ingredients present in the vaccines (eg. fetal cells, chemicals) or the technology used (e.g., mRNA vaccines can change your DNA)',
    'Side-effect': 'Side Effects / Deaths — The tweet expresses concerns about the side effects of the vaccines, including deaths caused.',
    'Ineffective': 'Vaccine is ineffective — The tweet expresses concerns that the vaccines are not effective enough and are useless.',
    'Religious': 'Religious Reasons — The tweet is against vaccines because of religious reasons',
    'None': 'No specific reason stated in the tweet, or some reason other than the given ones.'
}

questions = {
    'cmp-lg': 'Computational Linguistics - This field involves the use of computer algorithms and models to understand and process human language.',
    'cond-mat.dis-nn': 'Condensed Matter - Disordered Systems and Neural Networks - This subfield of condensed matter physics focuses on disordered materials and their properties, as well as neural networks.',
    'cond-mat.stat-mech': 'Condensed Matter - Statistical Mechanics - Statistical mechanics studies the behavior of a large number of particles in condensed matter systems.',
    'cs.ai': 'Computer Science - Artificial Intelligence - This field focuses on developing algorithms and systems that can perform tasks typically requiring human intelligence, such as learning and problem-solving.',
    'cs.cc': 'Computer Science - Computational Complexity - Computational complexity theory studies the resources required to solve computational problems.',
    'cs.ce': 'Computer Science - Computational Engineering - This field applies computational methods to engineering problems.',
    'cs.cg': 'Computer Science - Computer Graphics - Computer graphics deals with the creation, manipulation, and rendering of visual images using computers.',
    'cs.cl': 'Computer Science - Computation and Language - This subfield explores the intersection of computation and natural language.',
    'cs.cr': 'Computer Science - Cryptography and Security - Cryptography focuses on secure communication and data protection.',
    'cs.cv': 'Computer Science - Computer Vision - Computer vision is concerned with teaching computers to interpret visual information from the world.',
    'cs.cy': 'Computer Science - Cybersecurity - Cybersecurity focuses on protecting computer systems and networks from attacks and unauthorized access.',
    'cs.db': 'Computer Science - Databases - This field deals with the design, storage, and retrieval of data in databases.',
    'cs.dc': 'Computer Science - Distributed, Parallel, and Cluster Computing - This area explores the use of multiple computers to solve complex problems.',
    'cs.dl': 'Computer Science - Digital Libraries - Digital libraries involve the organization and access to large collections of digital information.',
    'cs.dm': 'Computer Science - Discrete Mathematics - Discrete mathematics deals with countable, distinct, and separate objects and structures.',
    'cs.ds': 'Computer Science - Data Structures - Data structures are fundamental components for organizing and storing data efficiently.',
    'cs.fl': 'Computer Science - Formal Languages and Automata Theory - This field studies the mathematical properties of formal languages and automata.',
    'cs.gt': 'Computer Science - General Literature - General literature might refer to publications related to computer science that don\'t fit into specific subfields.',
    'cs.hc': 'Computer Science - Human-Computer Interaction - HCI focuses on improving the interaction between humans and computers.',
    'cs.ir': 'Computer Science - Information Retrieval - Information retrieval involves the retrieval of relevant information from large datasets.',
    'cs.it': 'Computer Science - Information Theory - Information theory studies the quantification of information.',
    'cs.lg': 'Computer Science - Machine Learning - Machine learning is the study of algorithms and statistical models that enable computers to improve their performance on a specific task through experience.',
    'cs.lo': 'Computer Science - Logic in Computer Science - Logic is used in computer science for reasoning and problem-solving.',
    'cs.ma': 'Computer Science - Multiagent Systems - Multiagent systems involve multiple agents (computational entities) interacting in a shared environment.',
    'cs.mm': 'Computer Science - Multimedia - Multimedia involves the integration of various forms of media, such as text, audio, and video.',
    'cs.ms': 'Computer Science - Mathematical Software - This field focuses on the development of software for mathematical applications.',
    'cs.na': 'Computer Science - Numerical Analysis - Numerical analysis deals with numerical approximations of mathematical problems.',
    'cs.ne': 'Computer Science - Neural and Evolutionary Computing - This field explores computational models inspired by neural networks and evolution.',
    'cs.ni': 'Computer Science - Networking and Internet Architecture - Networking focuses on the design and implementation of computer networks.',
    'cs.pf': 'Computer Science - Performance - This field addresses the performance analysis and optimization of computer systems.',
    'cs.pl': 'Computer Science - Programming Languages - Programming languages are formal systems for coding instructions that computers can execute.',
    'cs.ro': 'Computer Science - Robotics - Robotics involves the design, construction, and operation of robots.',
    'cs.sc': 'Computer Science - Symbolic Computation - Symbolic computation involves manipulating mathematical expressions symbolically.',
    'cs.se': 'Computer Science - Software Engineering - Software engineering focuses on systematic approaches to software development.',
    'cs.si': 'Computer Science - Social and Information Networks - This field explores the analysis of social and information networks.',
    'cs.sy': 'Computer Science - Systems and Control - Systems and control engineering involves the control of dynamic systems.',
    'math.co': 'Mathematics - Combinatorics - Combinatorics studies combinations and arrangements of objects.',
    'math.it': 'Mathematics - Information Theory - Information theory in mathematics deals with quantifying information.',
    'math.lo': 'Mathematics - Logic - Logic is the study of reasoning and inference.',
    'math.na': 'Mathematics - Numerical Analysis - Numerical analysis involves approximating solutions to mathematical problems.',
    'math.nt': 'Mathematics - Number Theory - Number theory focuses on the properties and relationships of integers.',
    'math.oc': 'Mathematics - Optimization and Control - Optimization involves finding the best solution among a set of possible solutions.',
    'math.pr': 'Mathematics - Probability - Probability theory deals with uncertainty and randomness.',
    'math.st': 'Mathematics - Statistics - Statistics involves collecting, analyzing, and interpreting data.',
    'nlin.ao': 'Nonlinear Sciences - Adaptation and Self-Organizing Systems - This field explores complex, adaptive, and self-organizing systems.',
    'physics.data-an': 'Physics - Data Analysis, Statistics, and Probability - This area involves statistical and probabilistic methods in data analysis within physics.',
    'physics.soc-ph': 'Physics - Social and Behavioral Physics - This subfield applies physics principles to social and behavioral phenomena.',
    'q-bio.nc': 'Quantitative Biology - Neurons and Cognition - Quantitative biology involves the application of mathematical and computational techniques to biological research.',
    'q-bio.qm': 'Quantitative Biology - Quantitative Methods - This subfield focuses on quantitative approaches in biology.',
    'quant-ph': 'Quantum Physics - Quantum Mechanics and Quantum Information - Quantum physics deals with the behavior of particles at the quantum level.',
    'stat.ap': 'Statistics - Applications - This field involves the practical application of statistical methods.',
    'stat.me': 'Statistics - Methodology - Methodology in statistics focuses on the development of statistical techniques.',
    'stat.ml': 'Statistics - Machine Learning - Machine learning is applied to statistical problems and data analysis.',
    'stat.th': 'Statistics - Theory - This subfield involves the theoretical foundations of statistics.'
}








# Generate sentence embeddings for the values in the 'questions' dictionary
question_embeddings = {key: model.encode(value, convert_to_tensor=True, show_progress_bar=False) for key, value in questions.items()}

# Initialize a dictionary to store the top matching labels for each sentence
top_matching_labels = {}

list_labels = []
k = 0
# Read sentences from a text file (replace 'your_text_file.txt' with the actual file path)
with open('./lora_flan_large_prediction_aapd.txt', 'r') as file:
    current_label = None
    for line in file:
        k = k + 1;
        if(k % 1000 == 0):
            print(f"{k}th iteration")
        line = line.strip()
        temp_list = []
        # Check if "Pred:" appears in the line
        if "Pred:" in line:
            # Split the line at "Pred:" and take the part after it
            current_text = line.split("Pred:", 1)[1].strip()

            # Set the current label
            current_label = current_text
            # Split the line into sentences using full stops (periods) as separators
            sentences = current_label.split('.')
            sentences = [sentence.strip() for sentence in sentences if sentence.strip()]
            #print(sentences)

            # Find the top matching key for each sentence
            for i, sentence in enumerate(sentences):
                #print('sentence', sentence)
                words = sentence.split()

                # Define a set of articles and the word 'no'
                articles_and_no = set(['a', 'an', 'the', 'no'])

                # Check if all words in the sentence are in the set of articles and 'no'
                if all(word.lower() in articles_and_no for word in words):
                    continue
                #if 'none' not in words and len(words) < 5:
                 #   continue
                similarities = {}
                embedding = model.encode(sentence, convert_to_tensor=True, show_progress_bar=False)
                for key, category_embedding in question_embeddings.items():
                    cos_sim = util.pytorch_cos_sim(embedding, category_embedding)
                    #print('key', cos_sim)
                    similarities[key] = np.mean(cos_sim.cpu().numpy())
                

                #print('Similarities', similarities)
                #x =1/0
                top_matching_key = max(similarities, key=similarities.get)
                #print(top_matching_key)
                temp_list.append(top_matching_key.lower())
        list_labels.append(list(set(temp_list)))
#print(list_labels)
flattened_data = [' '.join(map(str, sublist)) for sublist in list_labels]
#print(flattened_data)
# Convert it to a pandas DataFrame with a single column
df = pd.DataFrame(flattened_data, columns=['Combined_Column'])

# Join the elements within each sublist with space separation
df['Combined_Column'] = df['Combined_Column'].apply(lambda x: ''.join(x))
#df.to_csv('./predicted.csv')
#print(df['Combined_Column'])
#x =1/0


val_aiso = pd.read_csv('test.csv')
val_aiso['Predicted'] = df['Combined_Column']
val_aiso.to_csv('predicted_test_aapd_flan_t5_large_t5xxl.csv')


from sklearn.metrics import f1_score, jaccard_score
from sklearn.preprocessing import MultiLabelBinarizer
ground_truth_labels = val_aiso['labels'].str.split()  # Assuming labels are separated by spaces
predicted_labels = val_aiso['Predicted'].str.split()        # Assuming labels are separated by spaces

#print(predicted_labels) #Initialize the MultiLabelBinarizer to convert labels into binary format
mlb = MultiLabelBinarizer()


# Transform the ground truth and predicted labels into binary format
ground_truth_binary = mlb.fit_transform(ground_truth_labels)
predicted_binary = mlb.transform(predicted_labels)

#print('gt labels', ground_truth_labels)
#print('pred labels', predicted_labels)
#print('gt binary',ground_truth_binary)

#print('pred binary', predicted_binary)

# Calculate the F1 macro score
f1_macro = f1_score(ground_truth_binary, predicted_binary, average='macro')

f1_micro = f1_score(ground_truth_binary, predicted_binary, average='micro')

# Print the F1 macro score
print("F1 Macro Score:", f1_macro)

print("F1 Micro Score:", f1_micro)


from sklearn.metrics import accuracy_score
accuracy_score = accuracy_score(ground_truth_binary, predicted_binary)
print('accuracy score', accuracy_score)

weight = f1_score(ground_truth_binary, predicted_binary, average="weighted", zero_division=0)
jacc = jaccard_score(ground_truth_binary, predicted_binary, average="samples", zero_division=0)

print('weighted', weight, 'jacc', jacc)
